program main [] = 
	real N = 3;
	const ctr1 = 5;
	const ctr2 = 3;
	
	@ pre : { sorted(p, 1) } @
	mechanism m[list[] p][list[] result]=
	 real winner1 = p[0][0];
	 real price1 = 0;
	 for i = 0 to N-1
	  do 
	  	price1 = price1 + ? c * p[i][1];
	 end for
	 tuple result1 = Tuple(winner1, price1);
	 
	 real winner2 = p[1][0];
	 real price2 = 0;
	 
	 for i = 0 to N-1
	  do 
	  	price2 = price2 + ? d * p[i][1];
	 end for
	 tuple result2 = Tuple(winner2, price2);
	 
	 result = List(result1, result2);
	end m
	 
   agent ag= 
    	real v;
    	real b;
    	
    	fun uf [list[] result, const id, real value ] [ real ut ] =
    		if (id == result[0][0])
       	 		then ut = ctr1 * (value - result[0][1]);
       	 	elseif (id == result[1][0])
       	 		then ut = ctr2 * (value - result[1][1]);
     		else ut = 0;
    	end uf
    	
    end ag
    
    execute
      list[] a;
      list[] e;
      
      for i = 0 to N-1
      	do 
      		a[i] = new ag(One, i);
      		e[i] = Tuple(a[i].self, a[i].b);
      end for
      
      list[] return;
      return =  m(e);
     end execute
 end program main
 @ post : forall(i, 0, N), { a[i].uf(return, a[i].self, a[i].v) <= a[i].uf(m(InsertSorted(Tuple(a[i].self,a[i].v), setExclude(e,i), 1)), a[i].self, a[i].v) } @
      	  
    	
	   
	