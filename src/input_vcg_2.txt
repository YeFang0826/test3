program main [] = 
	real N = 3;
	
	@ pre : { sorted(p, 1) } @
	mechanism m[list[] p][tuple result]=
	 real winner = p[0][0];
	 real price = 0;
	 for i = 0 to N-1
	  do 
	  	price = price + ? c * p[i][1];
	 end for
	 tuple result = Tuple(winner, price);
	end m
	 
   agent ag= 
    	real v;
    	real b;
    	
    	fun uf [tuple result, const id, real value ] [ real ut ] =
    		if (id == result[0])
       	 		then ut = value - result[1];
     		else ut = 0;
     		end if
    	end uf
    end ag
    
    execute
      list[] a;
      list[] e;
      
      for i = 0 to N-1
      	do 
      		a[i] = new ag(x, i);
      		e[i] = Tuple(a[i].self, a[i].b);
      end for
      
      tuple return;
      return = m(e);
      
     end execute
     
 end program main
 
 @ post : 
 	{{{ a[0].uf(return, a[0].self, a[0].v) <= a[0].uf(m(InsertSorted(Tuple(a[0].self, 1.05*a[0].v), setExclude(e,0), 1)), a[0].self, a[0].v) }
 			and
 		{ a[1].uf(return, a[1].self, a[1].v) <= a[1].uf(m(InsertSorted(Tuple(a[1].self, 1.1*a[1].v), setExclude(e,1), 1)), a[1].self, a[1].v) }}
 			and
 			{ a[2].uf(return, a[2].self, a[2].v) <= a[2].uf(m(InsertSorted(Tuple(a[2].self, 1.15*a[2].v), setExclude(e,2), 1)), a[2].self, a[2].v) }} @
      	  